note: external requirements
  --> $DIR/projection-no-regions-closure.rs:25:23
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                       ^^^^^^^
   |
   = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [
               Int(
                   I32,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::boxed::Box, [Param(T/#1), Adt(std::alloc::Global, [])])])]; c_variadic: false)->Adt(std::boxed::Box, [Dynamic([Binder(Trait(Anything), [])], '_#2r, Dyn), Adt(std::alloc::Global, [])]),
                       [],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: number of external vids: 3
   = note: where Alias(Projection, AliasTy { substs: [Param(T/#1)], def_id: DefId(2:7157 ~ core[a28e]::iter::traits::iterator::Iterator::Item) }): '_#2r

note: no external requirements
  --> $DIR/projection-no-regions-closure.rs:21:1
   |
LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>
LL | | where
LL | |     T: Iterator,
   | |________________^
   |
   = note: defining type: no_region::<'_#1r, T>

error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough
  --> $DIR/projection-no-regions-closure.rs:25:31
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                               ^^^^^^^^^^^^^^^^^^
   |
   = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...
   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds

note: external requirements
  --> $DIR/projection-no-regions-closure.rs:34:23
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                       ^^^^^^^
   |
   = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [
               Int(
                   I32,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::boxed::Box, [Param(T/#1), Adt(std::alloc::Global, [])])])]; c_variadic: false)->Adt(std::boxed::Box, [Dynamic([Binder(Trait(Anything), [])], '_#2r, Dyn), Adt(std::alloc::Global, [])]),
                       [],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: number of external vids: 3
   = note: where Alias(Projection, AliasTy { substs: [Param(T/#1)], def_id: DefId(2:7157 ~ core[a28e]::iter::traits::iterator::Iterator::Item) }): '_#2r

note: no external requirements
  --> $DIR/projection-no-regions-closure.rs:30:1
   |
LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>
LL | | where
LL | |     T: 'a + Iterator,
   | |_____________________^
   |
   = note: defining type: correct_region::<'_#1r, T>

note: external requirements
  --> $DIR/projection-no-regions-closure.rs:42:23
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                       ^^^^^^^
   |
   = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [
               Int(
                   I32,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::boxed::Box, [Param(T/#2), Adt(std::alloc::Global, [])])])]; c_variadic: false)->Adt(std::boxed::Box, [Dynamic([Binder(Trait(Anything), [])], '_#3r, Dyn), Adt(std::alloc::Global, [])]),
                       [],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: number of external vids: 4
   = note: where Alias(Projection, AliasTy { substs: [Param(T/#2)], def_id: DefId(2:7157 ~ core[a28e]::iter::traits::iterator::Iterator::Item) }): '_#3r

note: no external requirements
  --> $DIR/projection-no-regions-closure.rs:38:1
   |
LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>
LL | | where
LL | |     T: 'b + Iterator,
   | |_____________________^
   |
   = note: defining type: wrong_region::<'_#1r, '_#2r, T>

error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough
  --> $DIR/projection-no-regions-closure.rs:42:31
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                               ^^^^^^^^^^^^^^^^^^
   |
   = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...
   = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds

note: external requirements
  --> $DIR/projection-no-regions-closure.rs:52:23
   |
LL |     with_signature(x, |mut y| Box::new(y.next()))
   |                       ^^^^^^^
   |
   = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [
               Int(
                   I32,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::boxed::Box, [Param(T/#2), Adt(std::alloc::Global, [])])])]; c_variadic: false)->Adt(std::boxed::Box, [Dynamic([Binder(Trait(Anything), [])], '_#3r, Dyn), Adt(std::alloc::Global, [])]),
                       [],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: number of external vids: 4
   = note: where Alias(Projection, AliasTy { substs: [Param(T/#2)], def_id: DefId(2:7157 ~ core[a28e]::iter::traits::iterator::Iterator::Item) }): '_#3r

note: no external requirements
  --> $DIR/projection-no-regions-closure.rs:47:1
   |
LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>
LL | | where
LL | |     T: 'b + Iterator,
LL | |     'b: 'a,
   | |___________^
   |
   = note: defining type: outlives_region::<'_#1r, '_#2r, T>

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0309`.
