note: external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                        ^^^^^^
   |
   = note: defining type: generic::<T>::{closure#0} with closure substs [
               Int(
                   I16,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::option::Option, [Adt(std::cell::Cell, [Ref('_#1r, Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }), Tuple([]), Not), Not)])]), Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }), Param(T/#0), Not)])]; c_variadic: false)->Tuple([]),
                       [
                           Region(
                               BrAnon(0, None),
                           ),
                           Region(
                               BrAnon(1, None),
                           ),
                       ],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: number of external vids: 2
   = note: where Param(T/#0): '_#1r

note: no external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1
   |
LL | fn generic<T>(value: T) {
   | ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: defining type: generic::<T>

note: external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                        ^^^^^^
   |
   = note: defining type: generic_fail::<T>::{closure#0} with closure substs [
               Int(
                   I16,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Adt(std::option::Option, [Adt(std::cell::Cell, [Ref('_#1r, Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }), Tuple([]), Not), Not)])]), Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }), Param(T/#0), Not)])]; c_variadic: false)->Tuple([]),
                       [
                           Region(
                               BrAnon(0, None),
                           ),
                           Region(
                               BrAnon(1, None),
                           ),
                       ],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]
   = note: late-bound region is '_#2r
   = note: number of external vids: 3
   = note: where Param(T/#0): '_#1r

note: no external requirements
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1
   |
LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: defining type: generic_fail::<T>

error[E0309]: the parameter type `T` may not live long enough
  --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:31
   |
LL |     twice(cell, value, |a, b| invoke(a, b));
   |                               ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds
   |
help: consider adding an explicit lifetime bound...
   |
LL | fn generic_fail<'a, T: 'a>(cell: Cell<&'a ()>, value: T) {
   |                      ++++

error: aborting due to previous error

For more information about this error, try `rustc --explain E0309`.
