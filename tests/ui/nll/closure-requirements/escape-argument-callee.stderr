note: no external requirements
  --> $DIR/escape-argument-callee.rs:26:38
   |
LL |         let mut closure = expect_sig(|p, y| *p = y);
   |                                      ^^^^^^
   |
   = note: defining type: test::{closure#0} with closure substs [
               Int(
                   I16,
               ),
               FnPtr(
                   Binder(
                       ([Tuple([Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(0, None) }), Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(1, None) }), Int(I32), Not), Mut), Ref(ReLateBound(DebruijnIndex(0), BoundRegion { var: 2, kind: BrAnon(2, None) }), Int(I32), Not)])]; c_variadic: false)->Tuple([]),
                       [
                           Region(
                               BrAnon(0, None),
                           ),
                           Region(
                               BrAnon(1, None),
                           ),
                           Region(
                               BrAnon(2, None),
                           ),
                       ],
                   ),
               ),
               Tuple(
                   [],
               ),
           ]

error: lifetime may not live long enough
  --> $DIR/escape-argument-callee.rs:26:45
   |
LL |         let mut closure = expect_sig(|p, y| *p = y);
   |                                       -  -  ^^^^^^ assignment requires that `'1` must outlive `'2`
   |                                       |  |
   |                                       |  has type `&'1 i32`
   |                                       has type `&'_#2r mut &'2 i32`

note: no external requirements
  --> $DIR/escape-argument-callee.rs:20:1
   |
LL | fn test() {
   | ^^^^^^^^^
   |
   = note: defining type: test

error: aborting due to previous error

