- // MIR for `foo` before Refinements
+ // MIR for `foo` after Refinements
  
  fn foo(_1: bool) -> u32 {
      debug a => _1;                       // in scope 0 at $DIR/remove_otherwise.rs:3:8: 3:9
      let mut _0: u32;                     // return place in scope 0 at $DIR/remove_otherwise.rs:3:20: 3:23
      let _2: bool;                        // in scope 0 at $DIR/remove_otherwise.rs:5:9: 5:18
      scope 1 {
          debug b => _2;                   // in scope 1 at $DIR/remove_otherwise.rs:5:9: 5:18
      }
  
      bb0: {
          switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_otherwise.rs:4:5: 4:12
      }
  
      bb1: {
          _0 = const 28_u32;               // scope 0 at $DIR/remove_otherwise.rs:9:17: 9:19
          goto -> bb6;                     // scope 0 at $DIR/remove_otherwise.rs:9:17: 9:19
      }
  
      bb2: {
          StorageLive(_2);                 // scope 0 at $DIR/remove_otherwise.rs:5:9: 5:18
          _2 = _1;                         // scope 0 at $DIR/remove_otherwise.rs:5:9: 5:18
-         switchInt(_2) -> [false: bb3, otherwise: bb4]; // scope 1 at $DIR/remove_otherwise.rs:5:22: 5:29
+         switchInt(_2) -> bb3;            // scope 1 at $DIR/remove_otherwise.rs:5:22: 5:29
      }
  
      bb3: {
          _0 = const 7_u32;                // scope 1 at $DIR/remove_otherwise.rs:7:22: 7:23
          goto -> bb5;                     // scope 1 at $DIR/remove_otherwise.rs:7:22: 7:23
      }
  
      bb4: {
          _0 = const 1_u32;                // scope 1 at $DIR/remove_otherwise.rs:6:21: 6:22
          goto -> bb5;                     // scope 1 at $DIR/remove_otherwise.rs:6:21: 6:22
      }
  
      bb5: {
          StorageDead(_2);                 // scope 0 at $DIR/remove_otherwise.rs:8:9: 8:10
          goto -> bb6;                     // scope 0 at $DIR/remove_otherwise.rs:8:9: 8:10
      }
  
      bb6: {
          return;                          // scope 0 at $DIR/remove_otherwise.rs:11:2: 11:2
      }
  }
  
